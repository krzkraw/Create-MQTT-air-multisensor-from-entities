blueprint:
  name: MQTT air multisensor
  description: >
    Creates a MQTT air multisensor from selected temperature, humidity and (optional) pressure entities.
    This blueprint will create a single device with multiple sensor entities and automation to publish their values.
    It aims to have sane defaults - just type in suggested area and select your sensor entities!
    Or skip using area and name the device as you wish.
  domain: automation
  input:
    # --- Location / area ---
    suggested_area:
      name: Suggested area
      description: >
        Optional, suggested, area/room for the device (e.g., Living Room).
        It will be appended to the default device name.
        Leave empty to skip.
      default: ""
      selector:
        text:
          multiline: false
    auto_detect_area:
      name: Auto detect area
      description: If enabled and Suggested area empty, derive area from first available source entity.
      default: true
      selector:
        boolean: {}
    # --- Source sensor entities ---
    temp_entity:
      name: Temperature entity
      selector:
        entity:
          domain: sensor
          device_class: temperature
    hum_entity:
      name: Humidity entity
      selector:
        entity:
          domain: sensor
          device_class: humidity
    press_entity:
      name: Pressure entity
      description: Optional pressure sensor entity. Leave empty to skip pressure.
      default: ""
      selector:
        entity:
          domain: sensor
          device_class:
            - pressure
            - atmospheric_pressure
      # --- Entity naming/translation ---
    naming:
      name: Entity naming/translation
      icon: mdi:cog-outline
      description: Set names for created entities.
      input:
        temp_name:
          name: Created temperature entity's name
          default: "Temperature"
          selector:
            text:
              multiline: false
        hum_name:
          name: Created humidity entity's name
          default: "Humidity"
          selector:
            text:
              multiline: false
        press_name:
          name: Created pressure entity's name
          default: "Pressure"
          selector:
            text:
              multiline: false
    # --- Device identification ---
    device:
      name: Device name & model
      icon: mdi:cog-outline
      description: Optionally override generated device name and model.
      input:
        device_identifier:
          name: Device name
          description: Logical device name (shown under Devices in Home Assistant).
          default: "Air multisensor"
        append_area:
          name: Appended area
          description: Add area to device name after -.
          default: true
          selector:
            boolean: {}
        device_model:
          name: Device model
          description: Model reported in MQTT Discovery device info.
          default: "KRZ's air multisensor"
    # --- Precision settings ---
    precision:
      name: Precision settings for sensors
      icon: mdi:decimal-comma
      description: >
        Set precision settings for each sensor.
      input:
        temp_precision:
          name: Temperature precision (decimals)
          description: Number of decimal places for temperature.
          default: 1
          selector:
            number:
              min: 0
              max: 3
              step: 1
        hum_precision:
          name: Humidity precision (decimals)
          description: Number of decimal places for humidity.
          default: 0
          selector:
            number:
              min: 0
              max: 3
              step: 1
        press_precision:
          name: Pressure precision (decimals)
          description: Number of decimal places for pressure.
          default: 1
          selector:
            number:
              min: 0
              max: 3
              step: 1
    # --- Timing & behaviour ---
    updates:
      name: Updates & behaviour
      description: >
        Configure how the sensor updates its state.
      icon: mdi:update
      input:
        trigger_interval:
          name: Publish interval (seconds)
          description: How often to publish current values if no state changes occur.
          default: 3600
          selector:
            number:
              min: 10
              max: 7200
              step: 10
              unit_of_measurement: seconds
        publish_on_state_change:
          name: Publish on state change
          description: Also publish immediately whenever any selected entity changes.
          default: true
          selector:
            boolean: {}
    # --- MQTT options ---
    mqtt:
      name: MQTT options
      description: >
        Configure MQTT settings for the sensor.
      icon: mdi:cloud-cog-outline
      input:
        qos:
          name: QoS
          description: MQTT publish QoS level.
          default: 0
          selector:
            number:
              min: 0
              max: 2
              mode: slider
              step: 1
        retain:
          name: Retain
          description: Whether the last received MQTT status message should be retained - sensors will show the last known value.
          default: true
          selector:
            boolean: {}
        base_topic:
          name: Base MQTT topic
          description: >
            Leave empty to generate using device name.
            Base topic for publishing data (default would be: homeassistant/sensor/air_multisensor_suggested_area).
            State will be sent to <base_topic>/state.
          default: ""
        discovery_prefix:
          name: MQTT Discovery prefix
          description: Prefix for HA MQTT Discovery (usually homeassistant). Leave empty to skip creating discovery entities.
          default: homeassistant
        unique_id_prefix:
          name: unique_id prefix
          description: Prefix used to build unique_id values (must be unique). Leave empty to derive from the device name.
          default: ""

mode: queued
max: 3
max_exceeded: silent

variables:
  raw_device_name: !input device_identifier
  device_model: !input device_model
  base_topic: !input base_topic
  temp_entity: !input temp_entity
  hum_entity: !input hum_entity
  press_entity: !input press_entity
  temp_name: !input temp_name
  hum_name: !input hum_name
  press_name: !input press_name
  has_press: "{{ press_entity is defined and press_entity|length > 0 }}"
  qos: !input qos
  retain: !input retain
  discovery_prefix: !input discovery_prefix
  unique_id_prefix: !input unique_id_prefix
  trigger_interval: !input trigger_interval
  publish_on_state_change: !input publish_on_state_change
  temp_precision: !input temp_precision
  hum_precision: !input hum_precision
  press_precision: !input press_precision
  suggested_area_input: !input suggested_area
  auto_detect_area: !input auto_detect_area
  append_area: !input append_area
  # Automatically derive area from entities if user did not supply one.
  derived_area: >
    {{ area_name(temp_entity) or area_name(hum_entity) or (area_name(press_entity) if has_press else '') or '' }}
  suggested_area: >
    {{ suggested_area_input if suggested_area_input|length>0 else (derived_area if auto_detect_area else '') }}
  # Final device name (append area only if default name and area present)
  final_device_name: >
    {{ (raw_device_name ~ ' - ' ~ suggested_area) if (suggested_area|length > 0 and append_area) else raw_device_name }}
  # Computed sensor entity names (device name + optional custom override part or default suffix)
  temperature_entity_name: >
    {{ (temp_name) if temp_name|length>0 else ('Temperature') }}
  humidity_entity_name: >
    {{ (hum_name) if hum_name|length>0 else ('Humidity') }}
  pressure_entity_name: >
    {{ (press_name) if press_name|length>0 else ('Pressure') }}
  norm_device_name: "{{ final_device_name | lower | regex_replace('[^a-z0-9]+','_') }}"
  uid_prefix: "{{ (unique_id_prefix if unique_id_prefix|length>0 else norm_device_name) }}"
  default_topic: "homeassistant/sensor/{{ norm_device_name }}"
  topic: "{{ (base_topic if base_topic|length>0 else default_topic) }}"
  state_topic: "{{ topic }}/state"
  temp_uid: "{{ uid_prefix }}_temperature"
  hum_uid: "{{ uid_prefix }}_humidity"
  press_uid: "{{ uid_prefix }}_pressure"

trigger:
  - platform: homeassistant
    event: start
  - platform: event
    event_type: mqtt_discovery_retain_refresh  # manual custom event to republish discovery payloads if needed
  - platform: state
    entity_id: !input temp_entity
    id: change
    enabled: true
  - platform: state
    entity_id: !input hum_entity
    id: change
    enabled: true
  # Pressure trigger removed to allow pressure entity to be optional.
  # If you need immediate publish on pressure change, re-add a trigger referencing the selected pressure entity.

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ (trigger.id == 'change' and not publish_on_state_change) or
                 (trigger.id == 'tick' and ((now().timestamp() | int) % (trigger_interval | int) != 0)) }}
        sequence: []
    default: []
  - variables:
      temp_state: "{{ states(temp_entity) }}"
      hum_state: "{{ states(hum_entity) }}"
      press_state: "{{ states(press_entity) if has_press else '' }}"
      temp_uom: "{{ state_attr(temp_entity,'unit_of_measurement') or 'Â°C' }}"
      hum_uom: "{{ state_attr(hum_entity,'unit_of_measurement') or '%' }}"
      press_uom: "{{ (state_attr(press_entity,'unit_of_measurement') if has_press else 'hPa') }}"
  - service: mqtt.publish
    data:
      topic: "{{ state_topic }}"
      qos: "{{ qos | int }}"
      retain: "{{ retain }}"
      payload: >
        {%- if has_press -%}
        {{ {
          'temperature': (temp_state | float(default=0)),
          'humidity': (hum_state | float(default=0)),
          'pressure': (press_state | float(default=0)),
          'temperature_uom': temp_uom,
          'humidity_uom': hum_uom,
          'pressure_uom': press_uom,
          'device': final_device_name,
          'ts': (now().timestamp() | int)
        } | tojson }}
        {%- else -%}
        {{ {
          'temperature': (temp_state | float(default=0)),
          'humidity': (hum_state | float(default=0)),
          'temperature_uom': temp_uom,
          'humidity_uom': hum_uom,
          'device': final_device_name,
          'ts': (now().timestamp() | int)
        } | tojson }}
        {%- endif -%}

  - if: "{{ discovery_prefix | length > 0 }}"
    then:
      - variables:
          device_obj: >
            {{ {
              'identifiers':[uid_prefix],
              'name': final_device_name,
              'model': device_model,
              'manufacturer': 'KRZ',
              'sw_version': '1.0'
            } }}
      - service: mqtt.publish
        data:
          topic: "{{ discovery_prefix }}/sensor/{{ uid_prefix }}/temperature/config"
          retain: true
          qos: 0
          payload: >
            {{ {
              'name': temperature_entity_name,
              'state_topic': state_topic,
              'unit_of_measurement': temp_uom,
              'value_template': '{{ value_json.temperature | round(' ~ (temp_precision | int) ~ ') }}',
              'device_class': 'temperature',
              'unique_id': temp_uid,
              'device': device_obj,
              'suggested_display_precision': temp_precision,
              'state_class': 'measurement',
              'suggested_area': suggested_area,
              'expire_after': trigger_interval * 2
            } | tojson }}
      - service: mqtt.publish
        data:
          topic: "{{ discovery_prefix }}/sensor/{{ uid_prefix }}/humidity/config"
          retain: true
          qos: 0
          payload: >
            {{ {
              'name': humidity_entity_name,
              'state_topic': state_topic,
              'unit_of_measurement': hum_uom,
              'value_template': '{{ value_json.humidity | round(' ~ (hum_precision | int) ~ ') }}',
              'device_class': 'humidity',
              'unique_id': hum_uid,
              'device': device_obj,
              'suggested_display_precision': hum_precision,
              'state_class': 'measurement',
              'suggested_area': suggested_area,
              'expire_after': trigger_interval * 2
            } | tojson }}
      - if: "{{ has_press }}"
        then:
          - service: mqtt.publish
            data:
              topic: "{{ discovery_prefix }}/sensor/{{ uid_prefix }}/pressure/config"
              retain: true
              qos: 0
              payload: >
                {{ {
                  'name': pressure_entity_name,
                  'state_topic': state_topic,
                  'unit_of_measurement': press_uom,
                  'value_template': '{{ value_json.pressure | round(' ~ (press_precision | int) ~ ') }}',
                  'device_class': 'pressure',
                  'unique_id': press_uid,
                  'device': device_obj,
                  'suggested_display_precision': press_precision,
                  'state_class': 'measurement',
                  'suggested_area': suggested_area,
                  'expire_after': trigger_interval * 2
                } | tojson }}

      # Availability (optional) can be added similarly if desired.

alias: MQTT air multisensor (Blueprint Instance)
